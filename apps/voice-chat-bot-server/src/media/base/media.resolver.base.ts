/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Media } from "./Media";
import { MediaCountArgs } from "./MediaCountArgs";
import { MediaFindManyArgs } from "./MediaFindManyArgs";
import { MediaFindUniqueArgs } from "./MediaFindUniqueArgs";
import { CreateMediaArgs } from "./CreateMediaArgs";
import { UpdateMediaArgs } from "./UpdateMediaArgs";
import { DeleteMediaArgs } from "./DeleteMediaArgs";
import { SessionFindManyArgs } from "../../session/base/SessionFindManyArgs";
import { Session } from "../../session/base/Session";
import { MediaService } from "../media.service";
@graphql.Resolver(() => Media)
export class MediaResolverBase {
  constructor(protected readonly service: MediaService) {}

  async _mediaItemsMeta(
    @graphql.Args() args: MediaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Media])
  async mediaItems(@graphql.Args() args: MediaFindManyArgs): Promise<Media[]> {
    return this.service.mediaItems(args);
  }

  @graphql.Query(() => Media, { nullable: true })
  async media(
    @graphql.Args() args: MediaFindUniqueArgs
  ): Promise<Media | null> {
    const result = await this.service.media(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Media)
  async createMedia(@graphql.Args() args: CreateMediaArgs): Promise<Media> {
    return await this.service.createMedia({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Media)
  async updateMedia(
    @graphql.Args() args: UpdateMediaArgs
  ): Promise<Media | null> {
    try {
      return await this.service.updateMedia({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Media)
  async deleteMedia(
    @graphql.Args() args: DeleteMediaArgs
  ): Promise<Media | null> {
    try {
      return await this.service.deleteMedia(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Session], { name: "sessions" })
  async findSessions(
    @graphql.Parent() parent: Media,
    @graphql.Args() args: SessionFindManyArgs
  ): Promise<Session[]> {
    const results = await this.service.findSessions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
