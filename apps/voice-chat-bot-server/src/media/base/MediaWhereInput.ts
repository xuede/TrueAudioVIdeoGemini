/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum, ValidateNested } from "class-validator";
import { JsonFilter } from "../../util/JsonFilter";
import { StringFilter } from "../../util/StringFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { EnumMediaMediaType } from "./EnumMediaMediaType";
import { SessionListRelationFilter } from "../../session/base/SessionListRelationFilter";
import { EnumMediaTypeOfMedia } from "./EnumMediaTypeOfMedia";

@InputType()
class MediaWhereInput {
  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  duration?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: JsonFilter,
  })
  @Type(() => JsonFilter)
  @IsOptional()
  @Field(() => JsonFilter, {
    nullable: true,
  })
  filePath?: JsonFilter;

  @ApiProperty({
    required: false,
    type: JsonFilter,
  })
  @Type(() => JsonFilter)
  @IsOptional()
  @Field(() => JsonFilter, {
    nullable: true,
  })
  fileStoragePath?: JsonFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  linkedSession?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  mediaDuration?: IntNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumMediaMediaType,
  })
  @IsEnum(EnumMediaMediaType)
  @IsOptional()
  @Field(() => EnumMediaMediaType, {
    nullable: true,
  })
  mediaType?: "Option1";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  relatedSession?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => SessionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SessionListRelationFilter)
  @IsOptional()
  @Field(() => SessionListRelationFilter, {
    nullable: true,
  })
  sessions?: SessionListRelationFilter;

  @ApiProperty({
    required: false,
    type: JsonFilter,
  })
  @Type(() => JsonFilter)
  @IsOptional()
  @Field(() => JsonFilter, {
    nullable: true,
  })
  storagePath?: JsonFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  totalDuration?: IntNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumMediaTypeOfMedia,
  })
  @IsEnum(EnumMediaTypeOfMedia)
  @IsOptional()
  @Field(() => EnumMediaTypeOfMedia, {
    nullable: true,
  })
  typeOfMedia?: "Option1";
}

export { MediaWhereInput as MediaWhereInput };
