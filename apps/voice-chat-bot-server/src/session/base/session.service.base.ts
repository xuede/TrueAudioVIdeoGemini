/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Session as PrismaSession,
  Media as PrismaMedia,
  User as PrismaUser,
} from "@prisma/client";

export class SessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SessionCountArgs, "select">): Promise<number> {
    return this.prisma.session.count(args);
  }

  async sessions<T extends Prisma.SessionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SessionFindManyArgs>
  ): Promise<PrismaSession[]> {
    return this.prisma.session.findMany<Prisma.SessionFindManyArgs>(args);
  }
  async session<T extends Prisma.SessionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SessionFindUniqueArgs>
  ): Promise<PrismaSession | null> {
    return this.prisma.session.findUnique(args);
  }
  async createSession<T extends Prisma.SessionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SessionCreateArgs>
  ): Promise<PrismaSession> {
    return this.prisma.session.create<T>(args);
  }
  async updateSession<T extends Prisma.SessionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SessionUpdateArgs>
  ): Promise<PrismaSession> {
    return this.prisma.session.update<T>(args);
  }
  async deleteSession<T extends Prisma.SessionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SessionDeleteArgs>
  ): Promise<PrismaSession> {
    return this.prisma.session.delete(args);
  }

  async getMedia(parentId: string): Promise<PrismaMedia | null> {
    return this.prisma.session
      .findUnique({
        where: { id: parentId },
      })
      .media();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.session
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
